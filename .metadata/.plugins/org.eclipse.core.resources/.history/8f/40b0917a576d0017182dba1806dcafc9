/*
 * Shapet.cpp
 *
 *  Created on: 16-Jul-2017
 *      Author: tan
 */
#include "Build.h"
#include "Shapet.h"

#include <math.h>
Shape_t::Shape_t() {
	// TODO Auto-generated constructor stub

}
void Shape_t::colorDraw(EnumDataTypes_t::color cid)
{
	switch(cid)
	{
	case EnumDataTypes_t::BLACK:
		glColor3f(0,0,0);
		break;

	case EnumDataTypes_t::WHITE:
		glColor3f(1,1,1);
		break;

	case EnumDataTypes_t::RED:
		glColor3f(1,0,0);
		break;

	case EnumDataTypes_t::GREEN:
		glColor3f(0,1,0);
		break;

	case EnumDataTypes_t::BLUE:
		glColor3f(0,0,1);
		break;

	case EnumDataTypes_t::YELLOW:
		glColor3f(1,1,0);
		break;

	case EnumDataTypes_t::CYAN:
		glColor3f(0,1,1);
		break;

	case EnumDataTypes_t::MAGENTA:
		glColor3f(1,0,1);
		break;

	default:
		glColor3f(1,1,1);
		break;
	}
}
void Shape_t::drawCircle(float x,float y,float radius,EnumDataTypes_t::color cid,bool isFill)
{
	int triangleCount=100;

	if(isFill)
	{
		glBegin(GL_TRIANGLE_FAN);
		colorDraw(cid);
		glVertex2f(x,y);
		for(int i=0;i<=triangleCount;i++)
		{
			float X= x + (radius*cos(2.0*PI*i/100.0));
			float Y= y + (radius*sin(2.0*PI*i/100));
			glVertex2f(X,Y);
		}
		glEnd();
	}
	else
	{
		glBegin(GL_LINE_LOOP);
		colorDraw(cid);
		for(int i=0;i<triangleCount;i++)
		{
			float X= x + (radius*cos(2.0*PI*i/100.0));
			float Y= y + (radius*sin(2.0*PI*i/100));
			glVertex2f(X,Y);
		}
		glEnd();
	}
}

void Shape_t::drawFlag()
{
	// draw saffron color
	colorDraw(EnumDataTypes_t::MAGENTA);
	glBegin(GL_QUADS);
	glVertex2f(0,HEIGHT);
	glVertex2f(WIDTH,HEIGHT);
	glVertex2f(WIDTH,HEIGHT*2/3);
	glVertex2f(0,HEIGHT*2/3);
	glEnd();

	//draw white color
	colorDraw(EnumDataTypes_t::WHITE);
	glBegin(GL_QUADS);
	glVertex2f(0,HEIGHT*2/3);
	glVertex2f(WIDTH,HEIGHT*2/3);
	glVertex2f(WIDTH,HEIGHT*1/3);
	glVertex2f(0,HEIGHT*1/3);
	glEnd();

	//draw green color
	colorDraw(EnumDataTypes_t::GREEN);
	glBegin(GL_QUADS);
	glVertex2f(0,HEIGHT*1/3);
	glVertex2f(WIDTH,HEIGHT*1/3);
	glVertex2f(WIDTH,0);
	glVertex2f(0,0);
	glEnd();

	//draw centre circle
	drawCircle(WIDTH/2,HEIGHT/2,20,EnumDataTypes_t::BLUE,false);
	drawCircle(WIDTH/2,HEIGHT/2,10,EnumDataTypes_t::BLUE,true);

	//draw spokes
	glBegin(GL_LINES);
	glVertex2f(WIDTH/2,HEIGHT/2+20);
	glVertex2f(WIDTH/2,HEIGHT/2+40);
	glEnd();
}
